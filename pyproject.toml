[build-system]
requires = ["setuptools>=61.0"]
build-backend = "setuptools.build_meta"

[project]
name = "challenge-python"
version = "4.0.0"
description = "Sistema de Gerenciamento de Seguros - Sprint 4"
readme = "README.md"
requires-python = ">=3.9"

# =============================================================================
# BLACK - Formatação de Código
# =============================================================================
[tool.black]
line-length = 100
target-version = ['py39', 'py310', 'py311', 'py312']
include = '\.pyi?$'
extend-exclude = '''
/(
    \.git
  | \.venv
  | venv
  | __pycache__
  | htmlcov
  | \.pytest_cache
  | export
  | logs
  | json
)/
'''

# =============================================================================
# ISORT - Organização de Imports
# =============================================================================
[tool.isort]
profile = "black"
line_length = 100
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
skip_glob = ["__pycache__", "*.pyc", ".venv/*", "venv/*", "htmlcov/*"]

# Ordem de imports
sections = ["FUTURE", "STDLIB", "THIRDPARTY", "FIRSTPARTY", "LOCALFOLDER"]
known_third_party = ["mysql", "pymongo", "pytest", "dotenv"]
known_first_party = ["functions", "database", "tests", "utils"]

# =============================================================================
# RUFF - Linter Moderno e Rápido
# =============================================================================
[tool.ruff]
# Mesma line-length que Black
line-length = 100

# Python version target
target-version = "py39"

# Diretórios e arquivos a excluir
extend-exclude = [
    ".git",
    ".venv",
    "venv",
    "__pycache__",
    "htmlcov",
    ".pytest_cache",
    "export",
    "logs",
    "json",
    "*.pyc",
]

[tool.ruff.lint]
# Regras ativadas
# E: pycodestyle errors
# F: pyflakes
# I: isort
# N: pep8-naming
# W: pycodestyle warnings
# UP: pyupgrade (modernização de código)
# B: bugbear (erros comuns)
# C4: comprehensions
# SIM: simplify
# RUF: ruff-specific rules
select = [
    "E",    # pycodestyle errors
    "F",    # pyflakes  
    "I",    # isort
    "N",    # pep8-naming
    "W",    # pycodestyle warnings
    "UP",   # pyupgrade
    "B",    # bugbear
    "C4",   # comprehensions
    "SIM",  # simplify
    "RUF",  # ruff-specific
]

# Regras ignoradas (desativadas propositalmente)
ignore = [
    "E501",    # line too long (deixar Black gerenciar)
    "E731",    # lambda assignment (às vezes útil)
    "N802",    # function names lowercase (conflita com métodos de classe)
    "N806",    # variable in function lowercase (conflita com constantes)
    "B008",    # function calls in argument defaults (comum em FastAPI/pytest)
    "SIM102",  # collapsible if (às vezes mais legível separado)
    "SIM105",  # suppressible exception (try/except explícito é OK)
    "RUF012",  # mutable class attributes (às vezes necessário)
]

# Ignorar erros específicos em arquivos específicos
[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401"]  # imported but unused (OK em __init__.py)
"tests/*" = ["F401", "F811"]  # fixtures podem parecer não usados
"conftest.py" = ["F401", "F811"]  # fixtures do pytest

# Configuração de isort do Ruff
[tool.ruff.lint.isort]
known-first-party = ["functions", "database", "tests", "utils"]
known-third-party = ["mysql", "pymongo", "pytest", "dotenv"]

# =============================================================================
# PYTEST - Configuração de Testes
# =============================================================================
[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "-v",
    "--strict-markers",
    "--tb=short",
]
markers = [
    "mysql: tests that require MySQL connection",
    "mongodb: tests that require MongoDB connection",
    "integration: integration tests",
    "unit: unit tests",
]

# =============================================================================
# COVERAGE - Configuração de Cobertura de Código
# =============================================================================
[tool.coverage.run]
source = ["functions"]
omit = [
    "*/tests/*",
    "*/test_*.py",
    "*/__pycache__/*",
    "*/venv/*",
    "*/.venv/*",
]

[tool.coverage.report]
precision = 2
show_missing = true
skip_covered = false
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if __name__ == .__main__.:",
    "raise AssertionError",
    "raise NotImplementedError",
    "if TYPE_CHECKING:",
    "@abstractmethod",
]

[tool.coverage.html]
directory = "htmlcov"
